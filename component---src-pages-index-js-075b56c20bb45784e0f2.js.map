{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/helpers.js"],"names":["data","posts","node","author","language","categories","cntPerCategory","obj","sortable","item","b","a","sortObjectByValue","getSortedCategoriesByCount","useState","tabIndex","setTabIndex","categoryPosts","useMemo","post","onTabIndexChange","useCallback","title","className","value","onChange","tabs","moreUrl","showMoreButton"],"mappings":"yNAWe,sBAAe,IAAZA,EAAW,EAAXA,KACVC,EAAQD,EAAA,6BAAiC,gBAAGE,EAAH,cAAc,QAAd,MADpB,EAEEF,OAFF,aAEnBG,EAFmB,SAEXC,EAFW,WAGrBC,EAAU,2BCPwB,SAACJ,GACzC,IAAMK,EAAN,GAQA,OANAL,WAAc,YAAoB,EAAjBI,WACfA,SAAmB,YACjBC,KAA2BA,KAA2BA,KAA3BA,EAA3BA,QAZoB,SAACC,GACzB,IAAIC,EAAJ,GACA,IAAK,IAAL,OAAsBA,OAAc,CAACC,EAAMF,EAArBC,KAEtB,OADAA,QAAc,qBAAUE,KAAOC,EAAjB,MACPH,EAYAI,CAAA,QAAsC,2BDFfC,CAA9B,KAH2B,EAIKC,mBAJL,GAIpBC,EAJoB,KAIVC,EAJU,KAKrBC,EAAgBC,mBACpB,kBACEH,QAEId,EAAA,QAAa,mBAAUkB,sBAAyBd,EAAnC,SACnB,CAACA,EAAW,EALd,IAOMe,EAAmBC,uBAAY,qBAAcL,EAAd,KAArC,IAEA,OACE,2BACE,uBAAKM,MAAM,SACX,uBAAKnB,OAAL,EAAqBC,SAAUA,IAC/B,uBAAMmB,UAAN,OAAyBC,MAAzB,EAA0CC,SAA1C,EAAsEC,KAAMrB,IAC5E,uBACEJ,MAAOgB,UADT,GAEEU,QAAO,UAAWZ,SAAsBV,EAF1C,IAGEuB,eAAgBX,SAAuB","file":"component---src-pages-index-js-075b56c20bb45784e0f2.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Bio from '../components/bio';\nimport PostCardsColumn from '../components/post-cards-column';\nimport Post from '../models/post';\nimport Tabs from '../components/tabs';\n\nimport { getSortedCategoriesByCount } from '../utils/helpers';\n\nexport default ({ data }) => {\n  const posts = data.allMarkdownRemark.edges.map(({ node }) => new Post(node));\n  const { author, language } = data.site.siteMetadata;\n  const categories = ['All', ...getSortedCategoriesByCount(posts)];\n  const [tabIndex, setTabIndex] = useState(0);\n  const categoryPosts = useMemo(\n    () =>\n      tabIndex === 0\n        ? posts\n        : posts.filter((post) => post.categories.includes(categories[tabIndex])),\n    [categories, tabIndex, posts],\n  );\n  const onTabIndexChange = useCallback((e, value) => setTabIndex(value), []);\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Bio author={author} language={language} />\n      <Tabs className={'tabs'} value={tabIndex} onChange={onTabIndexChange} tabs={categories} />\n      <PostCardsColumn\n        posts={categoryPosts.slice(0, 4)}\n        moreUrl={`posts/${tabIndex === 0 ? '' : categories[tabIndex]}`}\n        showMoreButton={categoryPosts.length > 4}\n      />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 500, truncate: true)\n          frontmatter {\n            categories\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    site {\n      siteMetadata {\n        language\n        author {\n          name\n          bio {\n            role\n            description\n            thumbnail\n          }\n          social {\n            github\n            linkedIn\n            email\n          }\n        }\n      }\n    }\n  }\n`;\n","const sortObjectByValue = (obj) => {\n  let sortable = [];\n  for (let item in obj) sortable.push([item, obj[item]]);\n  sortable.sort((a, b) => b[1] - a[1]);\n  return sortable;\n};\n\nexport const getSortedCategoriesByCount = (posts) => {\n  const cntPerCategory = {};\n\n  posts.forEach(({ categories }) => {\n    categories.forEach((category) => {\n      cntPerCategory[category] = cntPerCategory[category] ? cntPerCategory[category] + 1 : 1;\n    });\n  });\n\n  return sortObjectByValue(cntPerCategory).map(([category]) => category);\n};\n"],"sourceRoot":""}